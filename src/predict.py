import pandas as pd
import joblib
import argparse
import os

# –ü—É—Ç–∏
MODEL_PATH = "models/pipeline_xgb_best.joblib"

def load_model(model_path):
    if not os.path.exists(model_path):
        raise FileNotFoundError(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {model_path}")
    return joblib.load(model_path)

def predict(model, input_path):
    if not os.path.exists(input_path):
        raise FileNotFoundError(f"–§–∞–π–ª —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    X_new = pd.read_csv(input_path)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    preds = model.predict(X_new)
    proba = model.predict_proba(X_new)[:, 1]  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ñ—Ä–æ–¥–∞

    # –ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for i, (p, prob) in enumerate(zip(preds, proba)):
        label = "–§–†–û–î" if p == 1 else "–ù–ï –§–†–û–î"
        print(f"üßæ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{i + 1}: {label} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ñ—Ä–æ–¥–∞: {prob:.2%})")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ñ—Ä–æ–¥–∞")
    parser.add_argument("--input", type=str, required=True, help="–ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏")
    args = parser.parse_args()

    model = load_model(MODEL_PATH)
    predict(model, args.input)